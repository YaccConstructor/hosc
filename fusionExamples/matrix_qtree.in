data Nat = Z | S Nat;

data Bool = True | False;

data QTree a = None | Val a | Node (QTree a) (QTree a) (QTree a) (QTree a) | Error;
data MaskQTree = MNone | MVal | MNode MaskQTree MaskQTree MaskQTree MaskQTree;

--mAdd pls (mask (mAdd pls m4 (mMult pls mlt m1 m2)) msk1) m3


--mAdd pls (mAdd pls m4 (mMult pls mlt m1 m2)) m3


--mAdd isZero pls m1 (mAdd isZero pls m2 m3)


mAdd isZero pls (mAdd isZero pls m1 m2) m3

--mMult pls mlt (mAdd pls m2 m3) m1

-- Problem!!!
--mAdd pls m1 (mask (mMult pls mlt m2 m3) msk1)

-- Cool! -> Problem
--mAdd isZero pls m1 (mask (mAdd isZero pls m2 m3) msk1)

--mAdd pls (mMult pls mlt m1 m) m1

--mMult pls mlt (kron mlt m1 m2) (kron mlt m1 m2)

--mAdd pls (kron mlt m1 m2) m3

--mMult pls mlt (kron mlt m1 (Node (Node (Val x) None (Val y) None)
--                                 None 
--                                 (Node (Val a) (Val b) None None)
--                                 (Node None None None (Val c)))) 
--              (kron mlt m1 (Node (Node (Val x) None (Val y) None)
--                                 None 
--                                 (Node (Val a) (Val b) None None)
--                                 (Node None None None (Val c))))

--mAdd pls      (kron mlt m1 (Node (Node (Val x) None (Val y) None)
--                                 None 
--                                 (Node (Val a) (Val b) None None)
--                                 (Node None None None (Val c)))) 
--              (kron mlt m1 (Node (Node (Val x) None (Val y) None)
--                                 None 
--                                 (Node (Val a) (Val b) None None)
--                                 (Node None None None (Val c))))


--kron mlt (mask (kron mlt m1 m2) msk1) m3

--mAdd pls (mask (kron mlt m1 m2) msk1) m3

--tcStep pls mlt (kron mlt m1 (w1 x y a b c))

--tcStep isZero pls mlt (kron isZero mlt m1 (w2 x y))  

where

sq = \isZ g h m -> mMult isZ g h m m;

tcStep = \isZ g h m -> mAdd isZ g m (sq isZ g h m);

w1 = \x y a b c ->
     Node (Node (Val x) None (Val y) None)
          None 
          (Node (Val a) (Val b) None None)
          (Node None None None (Val c));

w2 = \x y -> Node (Val x) None (Val y) None;

reduceTree = \n1 n2 n3 n4 -> 
    case n1 of {
         None -> case n2 of {
                      None -> case n3 of {
                                   None -> case n4 of {
                                                None -> None;
                                                Error -> Error;
                                                Val v4 -> Node n1 n2 n3 n4;
                                                Node m1 m2 m3 m4 -> Node n1 n2 n3 n4;
                                            };
                                   Error -> Error;
                                   Val v3 -> Node n1 n2 n3 n4;
                                   Node l1 l2 l3 l4 -> Node n1 n2 n3 n4;
                              };
                      Error -> Error;
                      Val v2 -> Node n1 n2 n3 n4;
                      Node k1 k2 k3 k4 -> Node n1 n2 n3 n4;
                  };
         Error -> Error;
         Val v1 -> Node n1 n2 n3 n4;
         Node j1 j2 j3 j4 -> Node n1 n2 n3 n4; 
    };

--reduceTree = \t -> 
--    case t of {
--         Error -> Error;
--         Val v -> Val v;
--         None -> None;
--         Node q1 q2 q3 q4 -> 
--            case q1 of {
--                 Node p1 p2 p3 p4 -> t;
--                 Val v1 -> t;
--                 Error -> Error;
--                 None -> case q2 of {
--                              Node r1 r2 r3 r4 -> t;
--                              Val v2 -> t;
--                              Error -> Error;
--                              None -> case q3 of {
--                                           Node y1 y2 y3 y4 -> t;
--                                           Val v3 -> t;
--                                           Error -> Error;
--                                           None -> case q4 of {
--                                                        Node u1 u2 u3 u4 -> t;
--                                                        Val v4 -> t;
--                                                        Error ->  Error;
--                                                        None -> None;
--                                                    };
--                                      };
--                        };
--            };
--    };

mkNode = \isZ x -> case (isZ x) of {True -> None; False -> Val x;}; 

mAdd = \isZ g m1 m2 -> 
    case m1 of{
         Error -> Error;
         None -> case m2 of {Error -> Error; 
                             None -> None; 
                             Val v -> m2; 
                             Node t1 t2 t3 t4 -> m2;};
         Val v1 -> case m2 of {Error -> Error; 
                               None -> m1; 
                               Val v -> mkNode isZ (g v1 v); 
                               Node t1 t2 t3 t4 -> Error;};
         Node q1 q2 q3 q4 -> case m2 of {Error -> Error;
                                         None -> m1; 
                                         Val v -> Error; 
                                         Node t1 t2 t3 t4 -> reduceTree 
                                                                    (mAdd isZ g q1 t1) 
                                                                    (mAdd isZ g q2 t2) 
                                                                    (mAdd isZ g q3 t3) 
                                                                    (mAdd isZ g q4 t4);};
};

mMult = \isZ g h m1 m2 -> 
    case m1 of {
         Error -> Error;
         None -> None;
         Val v1 -> 
             case m2 of {
                  Error -> Error; 
                  None -> None; 
                  Val v -> mkNode isZ (h v1 v); 
                  Node t1 t2 t3 t4 -> Error;
             };
         Node q1 q2 q3 q4 -> 
              case m2 of {
                   Error -> Error;
                   None -> None; 
                   Val v -> Error;
                   Node t1 t2 t3 t4 -> reduceTree
                                               (mAdd isZ g (mMult isZ g h q1 t1)(mMult isZ g h q2 t3)) 
                                               (mAdd isZ g (mMult isZ g h q1 t2)(mMult isZ g h q2 t4)) 
                                               (mAdd isZ g (mMult isZ g h q3 t1)(mMult isZ g h q4 t3)) 
                                               (mAdd isZ g (mMult isZ g h q3 t2)(mMult isZ g h q4 t4));};
};

mask = \m msk ->
    case m of{
         Error -> Error;
         None -> None;
         Val v1 -> case msk of {MNone -> None; MVal-> m;};
         Node q1 q2 q3 q4 -> case msk of {
                                  MNone -> None; 
                                  MVal -> m; 
                                  MNode t1 t2 t3 t4 -> 
                                   reduceTree  (mask q1 t1) (mask q2 t2) (mask q3 t3) (mask q4 t4);};
                      };
                      
eWizeScalarOp = \isZ g s m -> 
    case m of{
         Error -> Error;
         None -> None;
         Val v1 -> mkNode isZ (g v1 s);
         Node q1 q2 q3 q4 -> reduceTree 
                                 (eWizeScalarOp isZ g s q1) 
                                     (eWizeScalarOp isZ g s q2) 
                                     (eWizeScalarOp isZ g s q3) 
                                     (eWizeScalarOp isZ g s q4); 
};           
                      
kron = \isZ g m1 m2 ->
    case m1 of {
         Error -> Error;
         None -> None;
         Val v1 -> eWizeScalarOp isZ g v1 m2;
         Node q1 q2 q3 q4 -> reduceTree 
                                (kron isZ g q1 m2) 
                                    (kron isZ g q2 m2) 
                                    (kron isZ g q3 m2) 
                                    (kron isZ g q4 m2);
};                     
